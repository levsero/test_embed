{
  // Place your embeddable-framwork snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1')",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Describe Test": {
    "prefix": "Describe",
    "scope": "javascript,typescript",
    "body": [
      "describe('${1:testName}', () => {",
      "\tit('${2:testCriteriaName}', () => {",
      "\t\tconst ${3:result} = ${4:testCriteria}",
      "",
      "\t\texpect(${5:result}).toEqual(${6:expectedValue})",
      "\t})",
      "})"
    ],
    "description": "Test (it) function within Describe"
  },
  "Puppeteer debugger": {
    "prefix": "Debug",
    "scope": "javascript,typescript",
    "body": "await jestPuppeteer.debug()"
  },
  "Test function": {
    "prefix": "Test",
    "scope": "javascript,typescript",
    "body": [
      "test('${1:testName}', () => {",
      "\tconst result = ${2:testCriteria}",
      "",
      "\texpect(result).toEqual(${3:expectedValue})",
      "})"
    ],
    "description": "Test function with an expectation and result"
  },
  "Basic Selector": {
    "prefix": "Selector",
    "scope": "javascript,typescript",
    "body": ["export const ${1:name} = (${2:state}) => ${3:data}"],
    "description": "Basic selector with a name, state, and return value"
  },
  "Reducer": {
    "prefix": "Reducer",
    "scope": "javascript,typescript",
    "body": [
      "const initialState = {",
      "\t${1:initialStateValues}",
      "}",
      "",
      "const ${2:reducerName} = (state = initialState, action = {}) => {",
      "\tconst { type, payload } = action",
      "",
      "\tswitch (type) {",
      "\t\tcase ${3:caseCheck}:",
      "\t\t\treturn ${4:caseValue}",
      "\t\tdefault:",
      "\t\t\treturn state",
      "\t}",
      "}",
      "",
      "export default ${2}"
    ],
    "description": "empty reducer class"
  },
  "DescribeTestEach": {
    "prefix": "DescribeEach",
    "scope": "javascript,typescript",
    "body": [
      "describe('${1:funcName}', () => {",
      "\ttest.each([",
      "\t\t[${2:testvalue}],",
      "\t])('${3:title}', (${4:testParams}) => {",
      "\t\tconst result = ${5:test}",
      "\t\t",
      "\t\texpect(result).toEqual(${6:value})",
      "\t})",
      "})"
    ]
  },
  "FunctionComponent": {
    "prefix": "FunctionComponent",
    "scope": "javascript,typescript",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "const ${1:ClassName} = ({${2:props}}) => {",
      "\treturn <div></div>",
      "}",
      "",
      "$1.propTypes = {",
      "\t${3:propTypes}",
      "}",
      "",
      "export default $1"
    ]
  },
  "ConnectedStyledFunctionalComponent": {
    "prefix": "ConnectedStyledFunction",
    "scope": "javascript,typescript",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "import { } from './styles'",
      "",
      "const ${1:ClassName} = ({ ${2:props} }) => {",
      "\treturn <div></div>",
      "}",
      "",
      "$1.propTypes = {",
      "\t${3:propTypes}",
      "}",
      "",
      "const mapStateToProps = state => {",
      "\t${5:stateMaps}",
      "}",
      "",
      "const actionCreators = {",
      "\t${6:actionCreators}",
      "}",
      "",
      "const connectedComponent = connect(",
      "\tmapStateToProps,",
      "\tactionCreators",
      ")($1)",
      "",
      "export { connectedComponent as default, $1 as Component } "
    ]
  },
  "StyledFunctionComponent": {
    "prefix": "StyledFunctionComponent",
    "scope": "javascript,typescript",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "import { } from './styles'",
      "",
      "const ${1:ClassName} = ({${2:props}}) => {",
      "\treturn <div></div>",
      "}",
      "",
      "$1.propTypes = {",
      "\t${3:propTypes}",
      "}",
      "",
      "export default $1"
    ]
  },
  "StyledComponentStyles": {
    "prefix": "Style",
    "scope": "javascript,typescript",
    "body": [
      "import styled from 'styled-components'",
      "",
      "const ${1:ComponentName} = styled${2}`${3}`",
      "",
      "export { ${1} } "
    ]
  },
  "CreateStyledComponent": {
    "prefix": "StyledConst",
    "scope": "javascript,typescript",
    "body": ["const ${1:ComponentName} = styled${2:.div}`${3:styles}`"]
  },
  "StylePropsUsage": {
    "prefix": "StyleProps",
    "scope": "css",
    "body": "${props => ${1:calculation}}"
  },
  "CreateStateHook": {
    "prefix": "SseStateHook",
    "scope": "javascript,typescript",
    "body": "const [${1:getter}, ${2:setter}] = useState(${3:defaultValue})"
  },
  "ImportUseTranslate": {
    "prefix": "UseTranslate",
    "scope": "javascript,typescript",
    "body": ["import useTranslate from 'src/hooks/useTranslate'"]
  },
  "ImportTestRegime": {
    "prefix": "testRegime",
    "scope": "javascript,typescript",
    "body": [
      "import React from 'react'",
      "import { fireEvent } from '@testing-library/react'",
      "import { render } from 'src/util/testHelpers'",
      "import { TEST_IDS } from 'src/constants/shared'",
      "",
      "import ${1:ComponentName} from '${2:../}'",
      "",
      "const renderComponent = (props = {}) => {",
      "\tconst defaultProps = {",
      "\t\t${3:defaultPropValues}",
      "\t}",
      "",
      "\treturn render(<${1} {...defaultProps} {...props} />)",
      "}",
      "",
      "describe('${1}', () => {",
      "\tit('matches snapshot', () => {",
      "\t\tconst { container } = renderComponent()",
      "",
      "\t\texpect(container).toMatchSnapshot()",
      "\t})",
      "})"
    ]
  }
}
