{
  // Place your embeddable-framwork snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1')",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Describe Test": {
    "prefix": "describe",
    "scope": "javascript,typescript",
    "body": [
      "describe('${1:testName}', () => {",
      "\tlet result",
      "",
      "\tit('${2:testCriteriaName}', () => {",
      "\t\tresult = ${3:testCriteria}",
      "",
      "\t\texpect(result).toEqual(${4:expectedValue})",
      "\t})",
      "})"
    ],
    "description": "Test (it) function within Describe"
  },
  "Test function": {
    "prefix": "test",
    "scope": "javascript,typescript",
    "body": [
      "test('${1:testName}', () => {",
      "\tconst result = ${2:testCriteria}",
      "",
      "\texpect(result).toEqual(${3:expectedValue})",
      "})"
    ],
    "description": "Test function with an expectation and result"
  },
  "Basic Selector": {
    "prefix": "selector",
    "scope": "javascript,typescript",
    "body": ["export const ${1:name} = (${2:state}) => ${3:data}"],
    "description": "Basic selector with a name, state, and return value"
  },
  "ConnectedComponent": {
    "prefix": "ConnectedComponent",
    "scope": "javascript,typescript",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      "import { connnect } from 'react-redux'",
      "",
      "const mapStateToProps = (state) => {",
      "\treturn {${1:mapPropData}}",
      "}",
      "",
      "class ${2:className} extends Component {",
      "\tstatic propTypes = {",
      "\t\t${3:propTypeData}",
      "\t}",
      "\t",
      "\tstatic defaultProps = {",
      "\t\t${4:defaultPropData}",
      "\t}",
      "",
      "\trender = () => {",
      "\t\treturn (<div></div>)",
      "\t}",
      "}",
      "",
      "const actionCreators = {",
      "\t${5:actionData}",
      "}",
      "",
      "export default connect(mapStateToProps, actionCreators, null, { withRef: true })(${2:className})"
    ],
    "description": "Default Connected Component"
  },
  "Component": {
    "prefix": "Component",
    "scope": "javascript,typescript",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "class ${2:className} extends Component {",
      "\tstatic propTypes = {",
      "\t\t${3:propTypeData}",
      "\t}",
      "\t",
      "\tstatic defaultProps = {",
      "\t\t${4:defaultPropData}",
      "\t}",
      "",
      "\trender = () => {",
      "\t\treturn (<div></div>)",
      "\t}",
      "}"
    ],
    "description": "Empty Component"
  },
  "It test": {
    "prefix": "it",
    "scope": "javascript,typescript",
    "body": [
      "it('${1}', () => {",
      "\tconst result = ${2:test}",
      "",
      "\texpect(result).toEqual(${3:expectedValue})",
      "})"
    ],
    "description": "it test for use within describe"
  },
  "Component usage": {
    "prefix": "<",
    "scope": "javascript,typescript",
    "body": ["<${1:name} ${2:props}>", "\t${3:body}", "</${1:name}>"],
    "description": "Basic component implementation"
  },
  "Reducer": {
    "prefix": "reducer",
    "scope": "javascript,typescript",
    "body": [
      "const initialState = {",
      "\t${1:initialStateValues}",
      "}",
      "",
      "const ${2:reducerName} = (state = initialState, action = {}) => {",
      "\tconst { type, payload } = action",
      "",
      "\tswitch (type) {",
      "\t\tcase ${3:caseCheck}:",
      "\t\t\treturn ${4:caseValue}",
      "\t\tdefault:",
      "\t\t\treturn state",
      "\t}",
      "}"
    ],
    "description": "empty reducer class"
  },
  "DescribeTestEach": {
    "prefix": "describeEach",
    "scope": "javascript,typescript",
    "body": [
      "describe('${1:funcName}', () => {",
      "\ttest.each([",
      "\t\t[${2:testvalue}],",
      "\t])('${3:title}', (${4:testParams}) => {",
      "\t\tconst result = ${5:test}",
      "\t\t",
      "\t\texpect(result).toEqual(${6:value})",
      "\t})",
      "})"
    ]
  },
  "FunctionalComponent": {
    "prefix": "functionalComponent",
    "scope": "javascript,typescript",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "const ${1:className} = ({${2:props}}) => {",
      "\treturn <div></div>",
      "}",
      "",
      "${1}.propTypes = {",
      "\t${3:propTypes}",
      "}",
      "",
      "${1}.defaultProps = {",
      "\t${4:defaultProps}",
      "}",
      "",
      "export default ${1}"
    ]
  },
  "ConnectedFunctionalComponent": {
    "prefix": "connectedFunctional",
    "scope": "javascript,typescript",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "const ${1:className} = ({ ${2:props} }) => {",
      "\treturn <div></div>",
      "}",
      "",
      "${1}.propTypes = {",
      "\t${3:propTypes}",
      "}",
      "",
      "${1}.defaultProps = {",
      "\t${4:defaultProps}",
      "}",
      "",
      "const mapStateToProps = state => {",
      "\t${5:stateMaps}",
      "}",
      "",
      "const actionCreators = {",
      "\t${6:actionCreators}",
      "}",
      "",
      "const connectedComponent = connect(",
      "\tmapStateToProps,",
      "\tactionCreators,",
      ")(${1})",
      "",
      "export { connectedComponent as default, ${1} as Component } "
    ]
  }
}
