name: repo-checks
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'
jobs:
  main:
    name: node-ruby
    runs-on: [self-hosted, zendesk-stable]
    env:
      FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
    strategy:
      fail-fast: false
      matrix:
        task:
          [
            'lint',
            'test-ci',
            'fossa',
            'audit',
            'validate',
            'e2e0',
            'e2e1',
            'e2e2',
            'e2e3',
            'visual',
          ]
        include:
          - task: lint
            run: |
              yarn lint
          - task: test-ci
            run: |
              echo "Starting unit and integration tests"
              download_translations
              yarn workspace @zendesk/embeddable-framework test:ci
          - task: fossa
            run: |
              echo "Starting Fossa open source scan"
              ./script/run_fossa.sh;
          - task: audit
            run: |
              echo "Starting audit"
              yarn audit-ci --critical
          - task: validate
            run: |
              echo "Validating prod builds";
              download_translations
              bundle exec ruby ./script/validate_i18n.rb
              yarn workspace @zendesk/embeddable-framework build:validate
          - task: e2e0
            run: |
              export CI_NODE_TOTAL=4
              export CI_NODE_INDEX=0
              echo "Starting end-to-end tests CI_NODE_INDEX = $CI_NODE_INDEX";
              download_translations
              start_e2e_server
              export JEST_TESTS=$(SKIP_PARALLEL=1 yarn workspace @zendesk/embeddable-framework e2e --listTests --json)
              yarn workspace @zendesk/embeddable-framework e2e:ci
          - task: e2e1
            run: |
              export CI_NODE_TOTAL=4
              export CI_NODE_INDEX=1
              echo "Starting end-to-end tests CI_NODE_INDEX = $CI_NODE_INDEX";
              download_translations
              start_e2e_server
              export JEST_TESTS=$(SKIP_PARALLEL=1 yarn workspace @zendesk/embeddable-framework e2e --listTests --json)
              yarn workspace @zendesk/embeddable-framework e2e:ci
          - task: e2e2
            run: |
              export CI_NODE_TOTAL=4
              export CI_NODE_INDEX=2
              echo "Starting end-to-end tests CI_NODE_INDEX = $CI_NODE_INDEX";
              download_translations
              start_e2e_server
              export JEST_TESTS=$(SKIP_PARALLEL=1 yarn workspace @zendesk/embeddable-framework e2e --listTests --json)
              yarn workspace @zendesk/embeddable-framework e2e:ci
          - task: e2e3
            run: |
              export CI_NODE_TOTAL=4
              export CI_NODE_INDEX=3
              echo "Starting end-to-end tests CI_NODE_INDEX = $CI_NODE_INDEX";
              download_translations
              start_e2e_server
              export JEST_TESTS=$(SKIP_PARALLEL=1 yarn workspace @zendesk/embeddable-framework e2e --listTests --json)
              yarn workspace @zendesk/embeddable-framework e2e:ci
          - task: visual
            run: |
              echo "Starting visual regression testing";
              download_translations
              start_e2e_server
              yarn workspace @zendesk/embeddable-framework e2e:visual-regressions:ci
    steps:
      - uses: zendesk/checkout@v2
        with:
          token: ${{ secrets.ORG_GITHUB_TOKEN }}
          submodules: recursive
      - run: echo "::set-output name=NODE_VERSION::$(cat .nvmrc)"
        id: node_env
      - uses: zendesk/setup-node@v2.1.2
        with:
          node-version: ${{ steps.node_env.outputs.NODE_VERSION }}
      - uses: zendesk/setup-ruby@v1.49.0
      - name: before_install
        run: |
          curl -u "$ARTIFACTORY_USERNAME:$ARTIFACTORY_API_KEY" https://zdrepo.jfrog.io/zdrepo/api/npm/npm/auth/zendesk >> ~/.npmrc
      - name: install
        run: |
          git config --global url."https://${{ secrets.ORG_GITHUB_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
          mkdir packages/framework/dist
          sed -i 's/git+ssh:\/\/git@github.com\/zendesk\/chat-web-sdk/https:\/\/github.com\/zendesk\/chat-web-sdk/g' packages/framework/package.json
          yarn install
          yarn workspace @zendesk/embeddable-framework build:version:generate
      - name: ${{ matrix.task }}
        run: |
          download_translations() {
            bundle install --local --jobs=3 --retry=3 --path=vendor/bundle --without=deployment
            yarn workspace @zendesk/embeddable-framework build-setup:prod
          }
          start_e2e_server() {
            yarn workspace @zendesk/embeddable-framework e2e:server &
            sleep 5
            curl localhost:5123/e2e.html
          }
          ${{ matrix.run }}
  slack:
    name: Slack
    runs-on: [self-hosted, zendesk-stable]
    needs:
      - main
    if: always()
    steps:
      - name: Send slack notification when GH actions fails to build after merge to master
        if: github.ref == 'refs/heads/master' && contains(needs.*.result,'failure')
        uses: zendesk/ga/slack-post-msg@v2
        with:
          # taipan-notifications channel
          channel: C256EMVLJ
          slack-auth-token: ${{ secrets.ORG_SLACK_TOKEN }}
          status: failure
  release:
    needs:
      - main
    if: github.ref == 'refs/heads/master'
    runs-on: [self-hosted, zendesk-general]
    steps:
      - name: Notify Samson
        uses: zendesk/ga/samson-inbound-webhook@v2
        with:
          webhook-url: 'https://samson.zende.sk/integrations/generic/b127503546dbc459293e47fbae026af2'
  sonarqube:
    name: sonarqube
    runs-on: [ self-hosted,zendesk-stable ]
    steps:
      - uses: zendesk/checkout@v2
      - name: SonarQube scan PR - conversation-components
        if: github.event_name == 'pull_request'
        run: |
          sonar-scanner \
          -Dsonar.host.url="${{ secrets.SONARQUBE_HOST }}" \
          -Dsonar.login="${{ secrets.SONARQUBE_TOKEN }}" \
          -Dsonar.sourceEncoding=UTF-8 \
          -Dsonar.pullrequest.base="${{ github.base_ref }}" \
          -Dsonar.pullrequest.branch="${{ github.head_ref }}" \
          -Dsonar.pullrequest.key="${{ github.event.number }}" \
          -Dsonar.pullrequest.github.repository="zendesk/${{ github.event.repository.name }}" \
          -Dsonar.scm.revision="${{ github.event.pull_request.head.sha }}" \
          -Dsonar.projectKey=embeddable_framework:conversation-components \
          -Dsonar.projectName=embeddable_framework:conversation-components \
          -Dsonar.sources=packages/conversation-components/src \
          -Dsonar.exclusions=packages/**/__tests__/*,packages/**/__mocks__/**/*,packages/**/test/**/* \
          -Dsonar.coverage.exclusions=packages/**/__tests__/*,packages/**/__mocks__/**/*,packages/**/test/**/* \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
      - name: SonarQube scan PR - framework
        if: github.event_name == 'pull_request'
        run: |
          sonar-scanner \
          -Dsonar.host.url="${{ secrets.SONARQUBE_HOST }}" \
          -Dsonar.login="${{ secrets.SONARQUBE_TOKEN }}" \
          -Dsonar.sourceEncoding=UTF-8 \
          -Dsonar.pullrequest.base="${{ github.base_ref }}" \
          -Dsonar.pullrequest.branch="${{ github.head_ref }}" \
          -Dsonar.pullrequest.key="${{ github.event.number }}" \
          -Dsonar.pullrequest.github.repository="zendesk/${{ github.event.repository.name }}" \
          -Dsonar.scm.revision="${{ github.event.pull_request.head.sha }}" \
          -Dsonar.projectKey=embeddable_framework:framework \
          -Dsonar.projectName=embeddable_framework:framework \
          -Dsonar.sources=packages/framework/src \
          -Dsonar.exclusions=packages/**/__tests__/*,packages/**/__mocks__/**/*,packages/**/test/**/* \
          -Dsonar.coverage.exclusions=packages/**/__tests__/*,packages/**/__mocks__/**/*,packages/**/test/**/* \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
      - name: SonarQube scan master - conversation-components
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          sonar-scanner -X \
          -Dsonar.host.url="${{ secrets.SONARQUBE_HOST }}" \
          -Dsonar.login="${{ secrets.SONARQUBE_TOKEN }}" \
          -Dsonar.sourceEncoding=UTF-8 \
          -Dsonar.branch.name=master \
          -Dsonar.projectKey=embeddable_framework:conversation-components \
          -Dsonar.projectName=embeddable_framework:conversation-components \
          -Dsonar.sources=packages/conversation-components/src \
          -Dsonar.exclusions=packages/**/__tests__/*,packages/**/__mocks__/**/*,packages/**/test/**/* \
          -Dsonar.coverage.exclusions=packages/**/__tests__/*,packages/**/__mocks__/**/*,packages/**/test/**/* \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
      - name: SonarQube scan master - framework
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          sonar-scanner -X \
          -Dsonar.host.url="${{ secrets.SONARQUBE_HOST }}" \
          -Dsonar.login="${{ secrets.SONARQUBE_TOKEN }}" \
          -Dsonar.sourceEncoding=UTF-8 \
          -Dsonar.branch.name=master \
          -Dsonar.projectKey=embeddable_framework:framework \
          -Dsonar.projectName=embeddable_framework:framework \
          -Dsonar.sources=packages/framework/src \
          -Dsonar.exclusions=packages/**/__tests__/*,packages/**/__mocks__/**/*,packages/**/test/**/* \
          -Dsonar.coverage.exclusions=packages/**/__tests__/*,packages/**/__mocks__/**/*,packages/**/test/**/* \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
